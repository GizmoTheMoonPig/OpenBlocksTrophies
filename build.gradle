plugins {
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle' version '[6.0.18,6.2)'
}

version = "${project.minecraft_version}-${project.mod_version}." + (hasProperty("CIVersion") ? CIVersion : '0')
group = 'com.gizmo.trophies'
base {
	archivesName = mod_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
	mappings channel: 'official', version: "${project.minecraft_version}"
	copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		configureEach {
			workingDirectory project.file("run/${it.name}")
			property 'forge.logging.console.level', 'debug'

			mods {
				"${modid}" {
					source sourceSets.main
				}
			}
		}

		client {
			property 'forge.enabledGameTestNamespaces', modid
		}

		server {
			property 'forge.enabledGameTestNamespaces', modid
			args '--nogui'
		}

		gameTestServer {
			property 'forge.enabledGameTestNamespaces', modid
		}

		data {
			args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		name 'Jared\'s Maven' // JEI
		url 'https://maven.blamejared.com/'
	}
    maven {
        name 'Curseforge Maven' // Jade
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
	maven {
		url "https://modmaven.dev/"
	}
}

dependencies {
	minecraft "net.neoforged:forge:${project.minecraft_version}-${project.neo_version}"

    implementation fg.deobf("mezz.jei:jei-${project.minecraft_version}-forge:15.2.0.25")
    implementation fg.deobf("curse.maven:jade-324717:4681833")

	compileOnly fg.deobf("teamtwilight:twilightforest:4.3.1792:universal")
	compileOnly fg.deobf("curse.maven:citadel-331936:4613231")
	compileOnly fg.deobf("curse.maven:rats-323596:4608071")
//	compileOnly fg.deobf("curse.maven:bumblezone-362479:4507366")
	compileOnly fg.deobf("curse.maven:alexs-mobs-426558:4580894")
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : mod_name,
                "Specification-Vendor"    : "GizmoTheMoonPig",
                "Specification-Version"   : "1",
                "Implementation-Title"    : mod_name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "GizmoTheMoonPig",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
	finalizedBy 'reobfJar'
}

def secrets = new Properties()
def secretsFile = file('secrets.properties');
if (secretsFile.exists()) {
	secretsFile.withInputStream {
		stream -> secrets.load(stream)
	}

	fileTree("secrets").matching {
		include "**/*.properties"
	}.each {
		File file ->
			file.withInputStream {
				stream -> secrets.load(stream)
			}
	}
}

jar.finalizedBy('reobfJar')

def mavenUser = hasProperty("CIMUser") ? CIMUser : secrets.getProperty("maven_username")
def mavenToken = hasProperty("CIMToken") ? CIMToken : secrets.getProperty("maven_password")

publishing {
	publications {
		mavenJava(MavenPublication) {
			afterEvaluate {
				artifact project.jar
				artifact project.sourceJar
			}
			setGroupId 'gizmo'
			setArtifactId 'obtrophies'
		}
	}
	repositories {
		maven {
			url "https://maven.tamaized.com/releases"
			credentials {
				username mavenUser
				password mavenToken
			}
		}
	}
}

tasks.register('sourceJar', Jar) {
	dependsOn 'classes'
	from sourceSets.main.allSource
	archiveClassifier = 'sources'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
