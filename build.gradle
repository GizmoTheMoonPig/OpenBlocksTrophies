buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

version = "${project.minecraft_version}-${project.mod_version}." + (hasProperty("CIVersion") ? CIVersion : '0')
group = 'com.gizmo.trophies'
archivesBaseName = 'OpenBlocksTrophies'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
	mappings channel: 'official', version: "${project.minecraft_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'openblockstrophies'

            mods {
				"${project.modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'openblockstrophies'

            mods {
				"${project.modid}" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'openblockstrophies'

            mods {
				"${project.modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', "${project.modid}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
				"${project.modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		name 'Jared\'s Maven' // JEI
		url 'https://maven.blamejared.com/'
	}
    maven {
        name 'Curseforge Maven' // Jade
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
	maven {
		url "https://modmaven.dev/"
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    implementation fg.deobf("mezz.jei:jei-${project.minecraft_version}-forge:14.0.0.4")
    implementation fg.deobf("curse.maven:jade-324717:4439089")

	compileOnly fg.deobf("teamtwilight:twilightforest:4.3.1714:universal")
	compileOnly fg.deobf("curse.maven:citadel-331936:4579078")
	implementation fg.deobf("curse.maven:rats-323596:4585538")
//	compileOnly fg.deobf("curse.maven:bumblezone-362479:4507366")
	compileOnly fg.deobf("curse.maven:alexs-mobs-426558:4580894")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "OpenBlocks Trophies",
                "Specification-Vendor"    : "GizmoTheMoonPig",
                "Specification-Version"   : "1",
                "Implementation-Title"    : "OpenBlocksTrophies",
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "GizmoTheMoonPig",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def secrets = new Properties()
def secretsFile = file('secrets.properties');
if (secretsFile.exists()) {
	secretsFile.withInputStream {
		stream -> secrets.load(stream)
	}

	fileTree("secrets").matching {
		include "**/*.properties"
	}.each {
		File file ->
			file.withInputStream {
				stream -> secrets.load(stream)
			}
	}
}

jar.finalizedBy('reobfJar')

def mavenUser = hasProperty("CIMUser") ? CIMUser : secrets.getProperty("maven_username")
def mavenToken = hasProperty("CIMToken") ? CIMToken : secrets.getProperty("maven_password")

publishing {
	publications {
		mavenJava(MavenPublication) {
			afterEvaluate {
				artifact project.jar
				artifact project.sourceJar
			}
			setGroupId 'gizmo'
			setArtifactId 'obtrophies'
		}
	}
	repositories {
		maven {
			url "https://maven.tamaized.com/releases"
			credentials {
				username mavenUser
				password mavenToken
			}
		}
	}
}

task sourceJar(type: Jar, dependsOn: 'classes') {
	from sourceSets.main.allSource
	classifier = 'sources'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
